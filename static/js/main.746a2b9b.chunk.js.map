{"version":3,"sources":["components/weather/index.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","useState","searchValue","setSearchValue","coord","lon","lat","weather","id","main","description","icon","base","temp","feels_like","temp_min","temp_max","pressure","humidity","visibility","wind","speed","deg","clouds","all","dt","sys","type","country","sunrise","sunset","timezone","name","cod","apiData","setApiData","getWeatherData","a","url","axios","get","result","data","console","log","className","placeholder","value","onChange","e","target","onClick","Date","toLocaleString","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.746a2b9b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./style.css\";\n\nexport const Weather = () => {\n  const [searchValue, setSearchValue] = useState(`karachi`);\n  const [apiData, setApiData] = useState({\n    coord: { lon: 67.0822, lat: 24.9056 },\n    weather: [{ id: 721, main: \"Haze\", description: \"haze\", icon: \"50d\" }],\n    base: \"stations\",\n    main: {\n      temp: 306.05,\n      feels_like: 311.72,\n      temp_min: 306.05,\n      temp_max: 306.05,\n      pressure: 999,\n      humidity: 58,\n    },\n    visibility: 5000,\n    wind: { speed: 5.66, deg: 230 },\n    clouds: { all: 40 },\n    dt: 1631102116,\n    sys: {\n      type: 1,\n      id: 7576,\n      country: \"PK\",\n      sunrise: 1631063718,\n      sunset: 1631108632,\n    },\n    timezone: 18000,\n    id: 1174872,\n    name: \"Karachi\",\n    cod: 200,\n  });\n  const getWeatherData = async () => {\n    try {\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=36073263ae44556d26bbdd8ba9c645d8`;\n      const result = await axios.get(url);\n      setApiData(result.data);\n      console.log(`API Result`, result);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  console.log(`API DATA`, apiData);\n  return (\n    <div className=\"mainWeatherSection\">\n      <div className=\"searchArea\">\n        <input\n          type=\"text\"\n          placeholder=\"Search by City\"\n          value={searchValue}\n          onChange={(e) => {\n            setSearchValue(e.target.value);\n          }}\n        />\n        <button onClick={getWeatherData}>Search</button>\n      </div>\n      <div className=\"weatherInnerSection\">\n        <div className=\"weatherIcon\">\n          <i className={\"wi wi-day-sunny\"}></i>\n        </div>\n        <div className=\"weatherCloudsWrapper\">\n          <div className=\"weatherCloud\">\n            <div className=\"temp\">\n              <h2>{apiData?.main?.temp}&deg;</h2>\n            </div>\n            <div className=\"country\">\n              <p>{apiData?.weather[0]?.main}</p>\n              <p>{`${apiData?.name}, ${apiData?.sys?.country}`}</p>\n            </div>\n          </div>\n          <div className=\"weatherDate\">\n            <h2>{new Date().toLocaleString()}</h2>\n          </div>\n        </div>\n        <div className=\"weatherBottomSection\">\n          <div className=\"weatherBox\">\n            <i className={\"wi wi-sunset\"}></i>\n            <p>\n              {apiData?.sys?.sunset}\n              <span>Sunset</span>\n            </p>\n          </div>\n          <div className=\"weatherBox\">\n            <i className={\"wi wi-humidity\"}></i>\n            <p>\n              {apiData?.main?.humidity}\n              <span>Humidity</span>\n            </p>\n          </div>\n          <div className=\"weatherBox\">\n            <i className={\"wi wi-rain\"}></i>\n            <p>\n              {apiData?.main?.pressure}\n              <span>Presure</span>\n            </p>\n          </div>\n          <div className=\"weatherBox\">\n            <i className={\"wi wi-strong-wind\"}></i>\n            <p>\n              {apiData?.wind?.speed}\n              <span>Speed</span>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Weather } from \"./components/weather\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    \n      <Weather />\n   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}